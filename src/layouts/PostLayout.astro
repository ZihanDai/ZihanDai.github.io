---
import { type BlogSchema } from "../content/config";
import BaseLayout from "./BaseLayout.astro";
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";

export interface Props extends BlogSchema {
  contentType: string; // 'blog' or 'project'
}

const {
  title,
  description,
  pubDate,
  updatedDate,
  coverImage,
  coverImageHeight = 122,
  coverImageWidth = 150,
  contentType, // 'blog' or 'project'
  badge,
  tags = [],
} = Astro.props;
dayjs.extend(localizedFormat);
const displayDate = dayjs(pubDate).format("ll");
import { Image } from "astro:assets";

const contentConfig = {
  blog: {
    basePath: "/blogs",
  },
  project: {
    basePath: "/projects",
  },
};

const config = contentConfig[contentType] || contentConfig.blog;

const createTagUrl = (tag) => {
  return `${config.basePath}/tag/${tag}`;
};
---

<BaseLayout
  title={title}
  description={description}
  image={coverImage}
  ogType="article"
>
  <main class="md:flex md:justify-center">
    <article class="prose prose-lg max-w-[750px] prose-img:mx-auto">
      {
        coverImage && (
          <div
            class="flex-shrink-0 overflow-hidden mx-auto mb-4 flex items-center justify-center"
            style={{
              width: `${coverImageWidth}px`,
              height: `${coverImageHeight}px`,
            }}
          >
            <Image
              src={coverImage}
              width={coverImageWidth}
              height={coverImageHeight}
              alt={title}
              class="w-full h-full object-fill rounded-lg"
            />
          </div>
        )
      }

      <h1 class="title my-2 text-4xl font-bold">{title}</h1>
      {pubDate && <time>{displayDate}</time>}
      <br />
      {badge && <div class="badge badge-secondary my-1">{badge}</div>}
      {
        tags &&
          tags.map((tag) => (
            <a
              href={createTagUrl(tag)}
              class="badge badge-outline ml-2 no-underline"
            >
              {tag}
            </a>
          ))
      }
      {
        updatedDate && (
          <div>
            {" "}
            Last updated on <time>{updatedDate}</time>{" "}
          </div>
        )
      }
      <div class="divider my-2"></div>
      <slot />
    </article>
  </main>
</BaseLayout>

<style>
  .flex-shrink-0 {
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
  }
</style>
